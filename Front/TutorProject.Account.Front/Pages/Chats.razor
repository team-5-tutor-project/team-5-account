@page "/chats/{token}"
@using TutorProject.Account.Front.Models
@using TutorProject.Account.Front.Dtos.Token
@inject NavigationManager NavigationManager
@inject HttpClient _http
<PageTitle>Chats</PageTitle>

<h1>Chats</h1>

@if (!CurrentUser.IsAuthorized)
{
    NavigationManager.NavigateTo("/Login");
}

@if (_chats == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class='table'>
        <thead>
            <tr>
                <th>Name</th>
                <th>Link</th>
            </tr>
        </thead>
        <tbody>
        @if (CurrentUser.User is Tutor)
        {
            @foreach (var chat in _chats)
            {
                <tr>
                    <td>@chat.ClientName</td>
                    <td>Link</td>
                </tr>
            }
        }
        @if (CurrentUser.User is Client)
                {
                    @foreach (var chat in _chats)
                    {
                        <tr>
                            <td>@chat.TutorName</td>
                            <a href="http://localhost:5067/chat/@CurrentUser.User.Id">...</a>
                        </tr>
                    }
                }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string token{ get; set; }
    private Guid UserId { get; set; }
    private string UserType { get; set; }
    private List<Chat> _chats;

    private async Task GetChats()
    {
        var response = await _http.GetAsync($"/api/chats/clients/{UserId}/chats");
        _chats = response.Content.ReadFromJsonAsync<List<Chat>>().Result;
    }
    
    protected override async Task OnInitializedAsync()
    {
        var response = await _http.GetAsync($"/api/authorization/{token}");
        UserId = response.Content.ReadFromJsonAsync<TokenResponseDto>().Result.UserId;
        UserType = response.Content.ReadFromJsonAsync<TokenResponseDto>().Result.UserType;
        await GetChats();
    }

}
@page "/chats/{token}"
@using TutorProject.Account.Front.Models
@using TutorProject.Account.Front.Dtos.Token
@inject NavigationManager NavigationManager
@inject HttpClient _http
<PageTitle>Chats</PageTitle>

@if (!MainController.IsAuthorized)
{
    NavigationManager.NavigateTo("/Login");
}

<h1>Chats</h1>

@if (_chats == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class='table'>
        <thead>
            <tr>
                <th>Name</th>
                <th>Link</th>
            </tr>
        </thead>
        <tbody>
        @if (MainController.User == "Tutor")
        {
            @foreach (var chat in _chats)
            {
                <tr>
                    <td>@chat.ClientName</td>
                    <td>Link</td>
                </tr>
            }
        }
        @if (MainController.User == "Client")
                {
                    @foreach (var chat in _chats)
                    {
                        <tr>
                            <td>@chat.TutorName</td>
                            <a href="http://localhost:5067/chat/@UserId">link to chat</a>
                        </tr>
                    }
                }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string token { get; set; }
    
    private Guid? UserId { get; set; }
    private string? UserType { get; set; }
    private List<Chat>? _chats;

    private async Task GetChats()
    {
        var response = await _http.GetAsync($"/api/chats?token={token}");
        _chats = await response.Content.ReadFromJsonAsync<List<Chat>>();
    }

    private async Task<bool> Authorize()
    {
        var response = await _http.GetAsync($"/api/authorization?token={token}");
        
        if (!response.IsSuccessStatusCode)
            return true;
        
        var responseDto = await response.Content.ReadFromJsonAsync<TokenResponseDto>();
        UserId = responseDto?.UserId;
        UserType = responseDto?.UserType;

        return false;
    }
    
    protected override async Task OnInitializedAsync()
    {
        var authorizationFailed = await Authorize();
        
        if (authorizationFailed)
            NavigationManager.NavigateTo("/Login");
        
        await GetChats();
    }

}
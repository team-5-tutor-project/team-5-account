@page "/Registration"
@using TutorProject.Account.Front.Models
@using TutorProject.Account.Front.Dtos.Registation
@using TutorProject.Account.Front.Services
@inject HttpService _httpService
@inject AuthorizationService _authorizationService
@inject NavigationManager NavigationManager



<!-- Generated by ai2html v0.111.0 - 2022-06-26 18:14 -->
<!-- ai file: личный кабинет.ai -->
<style media="screen,print">
	#g-_-_-box ,
	#g-_-_-box .g-artboard {
		margin:0 auto;
	}
	#g-_-_-box p {
		margin:0;
	}
	#g-_-_-box .g-aiAbs {
		position:absolute;
	}
	#g-_-_-box .g-aiImg {
		position:absolute;
		top:0;
		display:block;
		width:100% !important;
	}
	#g-_-_-box .g-aiSymbol {
		position: absolute;
		box-sizing: border-box;
	}
	#g-_-_-box .g-aiPointText p { white-space: nowrap; }
	#g-_-_-Artboard_1 {
		position:relative;
		overflow:hidden;
	}
	#g-_-_-Artboard_1 p {
		font-weight:700;
		line-height:43px;
		height:auto;
		opacity:1;
		letter-spacing:0.014em;
		font-size:21px;
		text-align:left;
		color:rgb(77,77,77);
		text-transform:none;
		padding-bottom:0;
		padding-top:0;
		mix-blend-mode:normal;
		font-style:normal;
		position:static;
	}
	#g-_-_-Artboard_1 .g-pstyle0 {
		line-height:76px;
		height:76px;
		font-size:90px;
		text-align:center;
		color:rgb(240,240,240);
	}
	#g-_-_-Artboard_1 .g-pstyle1 {
		line-height:42px;
		height:42px;
		font-size:24px;
		color:rgb(240,240,240);
	}
	#g-_-_-Artboard_1 .g-pstyle2 {
		line-height:42px;
		height:42px;
		font-size:24px;
	}
	#g-_-_-Artboard_1 .g-pstyle3 {
		height:43px;
		opacity:0.41;
		font-size:25px;
	}
	#g-_-_-Artboard_1 .g-pstyle4 {
		height:43px;
		font-size:25px;
		color:rgb(240,240,240);
	}
	#g-_-_-Artboard_1 .g-pstyle5 {
		height:43px;
	}
	#g-_-_-Artboard_1 .g-cstyle0 {
		color:rgb(255,115,92);
	}
	#g-_-_-Artboard_2 {
		position:relative;
		overflow:hidden;
	}
	#g-_-_-Artboard_2 p {
		font-weight:700;
		line-height:43px;
		height:auto;
		opacity:1;
		letter-spacing:0.014em;
		font-size:21px;
		text-align:left;
		color:rgb(77,77,77);
		text-transform:none;
		padding-bottom:0;
		padding-top:0;
		mix-blend-mode:normal;
		font-style:normal;
		position:static;
	}
	#g-_-_-Artboard_2 .g-pstyle0 {
		line-height:76px;
		height:76px;
		font-size:90px;
		text-align:center;
		color:rgb(240,240,240);
	}
	#g-_-_-Artboard_2 .g-pstyle1 {
		line-height:42px;
		height:42px;
		font-size:24px;
	}
	#g-_-_-Artboard_2 .g-pstyle2 {
		line-height:42px;
		height:42px;
		font-size:24px;
		color:rgb(240,240,240);
	}
	#g-_-_-Artboard_2 .g-pstyle3 {
		height:43px;
		opacity:0.41;
		font-size:25px;
	}
	#g-_-_-Artboard_2 .g-pstyle4 {
		height:43px;
		font-size:25px;
		color:rgb(240,240,240);
	}
	#g-_-_-Artboard_2 .g-pstyle5 {
		height:43px;
	}
	#g-_-_-Artboard_2 .g-cstyle0 {
		color:rgb(255,115,92);
	}
	#g-_-_-Artboard_3 {
		position:relative;
		overflow:hidden;
	}
	#g-_-_-Artboard_3 p {
		font-weight:700;
		line-height:43px;
		height:auto;
		opacity:1;
		letter-spacing:0.014em;
		font-size:21px;
		text-align:left;
		color:rgb(240,240,240);
		text-transform:none;
		padding-bottom:0;
		padding-top:0;
		mix-blend-mode:normal;
		font-style:normal;
		position:static;
	}
	#g-_-_-Artboard_3 .g-pstyle0 {
		line-height:82px;
		height:82px;
		font-size:30px;
	}
	#g-_-_-Artboard_3 .g-pstyle1 {
		line-height:82px;
		height:82px;
		font-size:62px;
		color:rgb(77,77,77);
	}
	#g-_-_-Artboard_3 .g-pstyle2 {
		height:43px;
	}
	#g-_-_-Artboard_3 .g-pstyle3 {
		height:43px;
		opacity:0.41;
		color:rgb(77,77,77);
	}
	#g-_-_-Artboard_4 {
		position:relative;
		overflow:hidden;
	}
	#g-_-_-Artboard_4 p {
		font-weight:700;
		line-height:31px;
		height:auto;
		opacity:1;
		letter-spacing:0.014em;
		font-size:18px;
		text-align:left;
		color:rgb(240,240,240);
		text-transform:none;
		padding-bottom:0;
		padding-top:0;
		mix-blend-mode:normal;
		font-style:normal;
		position:static;
	}
	#g-_-_-Artboard_4 .g-pstyle0 {
		line-height:82px;
		height:82px;
		font-size:30px;
	}
	#g-_-_-Artboard_4 .g-pstyle1 {
		line-height:82px;
		height:82px;
		font-size:62px;
		color:rgb(77,77,77);
	}
	#g-_-_-Artboard_4 .g-pstyle2 {
		line-height:43px;
		height:43px;
		font-size:21px;
	}
	#g-_-_-Artboard_4 .g-pstyle3 {
		line-height:43px;
		height:43px;
		opacity:0.41;
		font-size:21px;
		color:rgb(77,77,77);
	}
	#g-_-_-Artboard_4 .g-pstyle4 {
		height:31px;
	}
	#g-_-_-Artboard_4 .g-pstyle5 {
		height:31px;
		color:rgb(77,77,77);
	}
	#g-_-_-Artboard_5 {
		position:relative;
		overflow:hidden;
	}
	#g-_-_-Artboard_5 p {
		font-weight:700;
		line-height:43px;
		height:auto;
		opacity:1;
		letter-spacing:0.014em;
		font-size:21px;
		text-align:left;
		color:rgb(240,240,240);
		text-transform:none;
		padding-bottom:0;
		padding-top:0;
		mix-blend-mode:normal;
		font-style:normal;
		position:static;
	}
	#g-_-_-Artboard_5 .g-pstyle0 {
		line-height:82px;
		height:82px;
		font-size:30px;
	}
	#g-_-_-Artboard_5 .g-pstyle1 {
		line-height:82px;
		height:82px;
		font-size:62px;
		color:rgb(77,77,77);
	}
	#g-_-_-Artboard_5 .g-pstyle2 {
		height:43px;
	}
	#g-_-_-Artboard_5 .g-pstyle3 {
		line-height:42px;
		height:42px;
		font-size:24px;
		color:rgb(77,77,77);
	}
	#g-_-_-Artboard_6 {
		position:relative;
		overflow:hidden;
	}
	#g-_-_-Artboard_6 p {
		font-weight:700;
		line-height:43px;
		height:auto;
		opacity:1;
		letter-spacing:0.014em;
		font-size:21px;
		text-align:left;
		color:rgb(240,240,240);
		text-transform:none;
		padding-bottom:0;
		padding-top:0;
		mix-blend-mode:normal;
		font-style:normal;
		position:static;
	}
	#g-_-_-Artboard_6 .g-pstyle0 {
		line-height:82px;
		height:82px;
		font-size:30px;
	}
	#g-_-_-Artboard_6 .g-pstyle1 {
		line-height:82px;
		height:82px;
		font-size:62px;
		color:rgb(77,77,77);
	}
	#g-_-_-Artboard_6 .g-pstyle2 {
		height:43px;
	}

</style>

<h2>
    Зарегистрироваться как
    <button class="btn btn-primary" @onclick="ChangeUserType">
        @switch (UserType)
        {
            case UserType.Client:
                <a>Клиент</a>
                break;
            case UserType.Tutor:
                <a>Репетитор</a>
                break;
        }
    </button>
</h2>
<div id="g-_-_-box" class="ai2html">

	<!-- Artboard: Artboard_2 -->
	<div id="g-_-_-Artboard_2" class="g-artboard" style="max-width: 1600px;max-height: 800px" data-aspect-ratio="2" data-min-width="0">
<div style="padding: 0 0 50% 0;"></div>
		<img id="g-_-_-Artboard_2-img" class="g-_-_-Artboard_2-img g-aiImg" alt="" src="https://i.ibb.co/jJ8KHPS/Tutor-Sign-Up.png"/>
		<div id="g-ai1-1" class="g-_ g-aiAbs g-aiPointText" style="top:17.7679%;margin-top:-44.1px;left:50.0659%;margin-left:-335.5px;width:671px;">
			<p class="g-pstyle0">Регистрация</p>
		</div>
		<div id="g-ai1-6" class="g-_ g-aiAbs g-aiPointText" style="top:41.7422%;margin-top:-22.9px;left:39.754%;width:79px;">
			<p class="g-pstyle3"><input @bind="Name" placeholder="имя"></p>
		</div>
		<div id="g-ai1-7" class="g-_ g-aiAbs g-aiPointText" style="top:49.8672%;margin-top:-22.9px;left:39.8165%;width:107px;">
			<p class="g-pstyle3"><input @bind="Username" placeholder="логин"></p>
		</div>
		<div id="g-ai1-8" class="g-_ g-aiAbs g-aiPointText" style="top:57.9922%;margin-top:-22.9px;left:39.8165%;width:124px;">
			<p class="g-pstyle3"><input @bind="Password" placeholder="пароль"></p>
		</div>
		@if (UserType is UserType.Tutor)
        {
            <div id="g-ai1-8" class="g-_ g-aiAbs g-aiPointText" style="top:66%;margin-top:-22.9px;left:39.8165%;width:124px;">
                    			<p class="g-pstyle3"><input @bind="Subject" placeholder="предмет"></p>
                    		</div>
        }
		<div id="g-ai1-9" class="g-_ g-aiAbs g-aiPointText" style="top:74.4922%;margin-top:-22.9px;left:47.4219%;width:106px;">
			<button @onclick="@OnSignUpButtonClick" class="g-pstyle4 btn btn-outline-light">Войти</button>
		</div>
		<div id="g-ai1-10" class="g-_ g-aiAbs g-aiPointText" style="top:75.5884%;margin-top:-352.7px;left:41.4415%;width:296px;">
			<p class="g-pstyle5">Уже есть аккаунт? <span class="g-cstyle0"><a href="Login" style="text-decoration: none; color: #ff735c">Вход</a></span></p>
		</div>
	</div>

</div>

<!-- End ai2html - 2022-06-26 18:14 -->

@*<h1>Регистрация в TutorService</h1>
<h2>
    Зарегистрироваться как
    <button class="btn btn-primary" @onclick="ChangeUserType">
        @switch (UserType)
        {
            case UserType.Client:
                <a>Клиент</a>
                break;
            case UserType.Tutor:
                <a>Репетитор</a>
                break;
        }
    </button>
</h2>
<p></p>
<p>
    <input @bind="Username" placeholder="Логин">
</p>
<p>
    <input @bind="Password" type="password" placeholder="Пароль">
</p>
<p>
    <input @bind="Name" placeholder="Имя"/>
</p>
@if (UserType is UserType.Tutor)
{
    <p>
        <input @bind="Subject" placeholder="Ваш предмет"/>
    </p>
}
<p></p>
<button class="btn btn-dark" @onclick="OnSignUpButtonClick">Зарегистрироваться</button>
<p></p>
<p>Уже есть аккаунт? <a href="Login">Войти</a></p>
@if (RegistrationFailed)
{
    <p>Пользователь с таким логином уже существует</p>
}*@


@code {
    private UserType UserType { get; set; }

    private string Username { get; set; }
    private string Password { get; set; }
    private string Name { get; set; }
    private string Subject { get; set; }

    private bool RegistrationFailed { get; set; }

    void ChangeUserType()
    {
        UserType = UserType switch {
            UserType.Client => UserType.Tutor,
            UserType.Tutor => UserType.Client,
            _ => throw new InvalidOperationException()
            };
    }

    async Task<RequestResult<RegistrationResponseDto?>> SignUpTutor()
    {
        var clientRegistrationDto = new TutorRegistrationDto
        {
            Login = Username,
            Name = Name,
            Password = Password,
            Subject = Subject
        };

        var registrationUri = "api/tutors/sign_up";

        return await _httpService.PostWithBodyAsync<RegistrationResponseDto>(registrationUri, clientRegistrationDto);
    }

    async Task<RequestResult<RegistrationResponseDto?>> SignUpClient()
    {
        var clientRegistrationDto = new ClientRegistrationDto
        {
            Login = Username,
            Name = Name,
            Password = Password
        };

        var registrationUri = "api/clients/sign_up";

        return await _httpService.PostWithBodyAsync<RegistrationResponseDto>(registrationUri, clientRegistrationDto);
    }

    async Task OnSignUpButtonClick()
    {
        var result = UserType switch {
            UserType.Client => await SignUpClient(),
            UserType.Tutor => await SignUpTutor(),
            _ => throw new InvalidOperationException()
        };

        if (result.IsSuccessful)
        {
            await _authorizationService.AuthorizeAsync(result.ResponseDto!.AuthorizationToken);
            NavigationManager.NavigateTo($"Account");
        }

        RegistrationFailed = true;
    }

	public void OnLoginButtonClick()
	{
		NavigationManager.NavigateTo("Login");
	}
}
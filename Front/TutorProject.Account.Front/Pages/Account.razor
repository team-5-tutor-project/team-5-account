@page "/account"
@using TutorProject.Account.Front.Models
@using TutorProject.Account.Front.Services
@inject NavigationManager NavigationManager
@inject HttpService _HttpService
@inject AuthorizationService _authorizationService;

<PageTitle>Личный кабинет</PageTitle>

<h1>Личный кабинет</h1>

@if (Name == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn" onclick="@LogOut">Выйти</button>
    <table class='table'>
        <tbody>
        <tr>
            <td>Имя</td>
            <td>@Name</td>
        </tr>
        @if (_authData.UserType == "Client")
        {
        }
        @if (_authData.UserType == "Tutor")
        {
            <tr>
                <td>Цена за час занятия:</td>
                <td>@Price</td>
            </tr>
            <tr>
                <td>Классы у которых ведет репетитор:</td>
                <td>@Price</td>
            </tr>
            <tr>
                <td>Формат работы:</td>
                <td>@WorkFormat</td>
            </tr>
            <tr>
                <td>Описание</td>
                <td>@Description</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private string? Name { get; set; }
    private string? Price { get; set; }
    private string? IntervalClass { get; set; }
    private string? WorkFormat { get; set; }
    private string? Description { get; set; }

    private AuthorizationData _authData;

    private async Task GetTutor()
    {
        var response = await _HttpService.GetAsync<Tutor>($"/api/tutors?token={_authData.Token}");

        var user = response.ResponseDto;
        Name = user?.Name;
        Description = user?.Description ?? "пусто";
        Price = user?.PricePerHour == null ? Convert.ToString(user?.PricePerHour) : "пусто";
        IntervalClass = (user?.PupilMinClass == null || user?.PupilMaxClass == null) ?
            Convert.ToString(user?.PupilMinClass) + "-" + Convert.ToString(user?.PupilMaxClass) : "пусто";
        WorkFormat = user?.WorkFormat switch
        {
            Common.Models.WorkFormat.Online => "Онлайн",
            Common.Models.WorkFormat.ClientHome => "у Клиента",
            Common.Models.WorkFormat.TutorHome => "У Репетитора",
            Common.Models.WorkFormat.Empty => "пусто",
            _ => throw new ArgumentOutOfRangeException()
            };
    }
    
    private async Task GetClient()
    {
        var result = await _HttpService.GetAsync<Client>($"/api/clients?token={_authData.Token}");
        Name = result.ResponseDto.Name;
    }

    private async Task LogOut()
    {
        await _authorizationService.CancelAuthorization();
        NavigationManager.NavigateTo("Login");
    }

    protected override async Task OnInitializedAsync()
    {
        var authData = await _authorizationService.GetAuthData();
        if (authData is null)
            NavigationManager.NavigateTo("Login");

        _authData = authData!;
        
        if (authData!.UserType == "Client")
            await GetClient();
        else
            await GetTutor();
    }
}
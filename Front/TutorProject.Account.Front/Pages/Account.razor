@page "/account"
@using TutorProject.Account.Front.Models
@using TutorProject.Account.Front.Services
@using TutorProject.Account.Common.Models
@using TutorProject.Account.Front.Dtos.Account
@inject NavigationManager NavigationManager
@inject HttpService _HttpService
@inject AuthorizationService _authorizationService;

<PageTitle>Личный кабинет</PageTitle>


<!-- Generated by ai2html v0.111.0 - 2022-06-26 18:14 -->
<!-- ai file: личный кабинет.ai -->
<style media="screen,print">
	#g-_-_-box ,
	#g-_-_-box .g-artboard {
		margin:0 auto;
	}
	#g-_-_-box p {
		margin:0;
	}
	#g-_-_-box .g-aiAbs {
		position:absolute;
	}
	#g-_-_-box .g-aiImg {
		position:absolute;
		top:0;
		display:block;
		width:100% !important;
	}
	#g-_-_-box .g-aiSymbol {
		position: absolute;
		box-sizing: border-box;
	}
	#g-_-_-box .g-aiPointText p { white-space: nowrap; }
	#g-_-_-Artboard_1 {
		position:relative;
		overflow:hidden;
	}
	#g-_-_-Artboard_3 {
		position:relative;
		overflow:hidden;
	}
	#g-_-_-Artboard_3 p {
		font-weight:700;
		line-height:43px;
		height:auto;
		opacity:1;
		letter-spacing:0.014em;
		font-size:21px;
		text-align:left;
		color:rgb(240,240,240);
		text-transform:none;
		padding-bottom:0;
		padding-top:0;
		mix-blend-mode:normal;
		font-style:normal;
		position:static;
	}
	#g-_-_-Artboard_3 .g-pstyle0 {
		line-height:82px;
		height:82px;
		font-size:30px;
	}
	#g-_-_-Artboard_3 .g-pstyle1 {
		line-height:82px;
		height:82px;
		font-size:62px;
		color:rgb(77,77,77);
	}
	#g-_-_-Artboard_3 .g-pstyle2 {
		height:43px;
	}
	#g-_-_-Artboard_3 .g-pstyle3 {
		height:43px;
		opacity:0.41;
		color:rgb(77,77,77);
	}
	#g-_-_-Artboard_4 {
		position:relative;
		overflow:hidden;
	}
	#g-_-_-Artboard_4 p {
		font-weight:700;
		line-height:31px;
		height:auto;
		opacity:1;
		letter-spacing:0.014em;
		font-size:18px;
		text-align:left;
		color:rgb(240,240,240);
		text-transform:none;
		padding-bottom:0;
		padding-top:0;
		mix-blend-mode:normal;
		font-style:normal;
		position:static;
	}
	#g-_-_-Artboard_4 label {
		font-weight:700;
		line-height:34px;
		height:auto;
		opacity:1;
		letter-spacing:0.014em;
		font-size:18px;
		text-align:left;
		color:rgb(77,77,77);
		text-transform:none;
		padding-bottom:0;
		padding-top:0;
		mix-blend-mode:normal;
		font-style:normal;
		position:static;
	}
	#g-_-_-Artboard_4 .g-pstyle0 {
		line-height:82px;
		height:82px;
		font-size:30px;
	}
	#g-_-_-Artboard_4 .g-pstyle1 {
		line-height:82px;
		height:82px;
		font-size:62px;
		color:rgb(77,77,77);
	}
	#g-_-_-Artboard_4 .g-pstyle2 {
		line-height:43px;
		height:43px;
		font-size:21px;
	}
	#g-_-_-Artboard_4 .g-pstyle3 {
		line-height:43px;
		height:43px;
		opacity:0.41;
		font-size:21px;
		color:rgb(77,77,77);
	}
	#g-_-_-Artboard_4 .g-pstyle4 {
		height:31px;
	}
	#g-_-_-Artboard_4 .g-pstyle5 {
		height:31px;
		color:rgb(77,77,77);
	}
</style>
@if (_authData?.UserType == "Client")
{
	<div id="g-_-_-box" class="ai2html">
	<!-- Artboard: Artboard_3 -->
	<div id="g-_-_-Artboard_3" class="g-artboard" style="max-width: 1600px;max-height: 800px" data-aspect-ratio="2" data-min-width="0">
		<div style="padding: 0 0 50% 0;"></div>
		<img id="g-_-_-Artboard_3-img" class="g-_-_-Artboard_3-img g-aiImg" alt="" src="https://i.ibb.co/m024BhV/Artboard-3.png"/>
		<div id="g-ai2-1" class="g-_ g-aiAbs g-aiPointText" style="top:7.5963%;margin-top:-42.8px;left:1.4966%;width:272px;">
			<p class="g-pstyle0">TUTORSERVICE</p>
		</div>
		<div id="g-ai2-2" class="g-_ g-aiAbs g-aiPointText" style="top:17.3322%;margin-top:-44.7px;left:22.183%;width:613px;">
			<p class="g-pstyle1">Личный кабинет</p>
		</div>
		<div id="g-ai2-3" class="g-_ g-aiAbs g-aiPointText" style="top:18.9634%;margin-top:-22.7px;left:4.3575%;width:215px;">
			<p class="g-pstyle2">Личный кабинет</p>
		</div>
		<div id="g-ai2-4" class="g-_ g-aiAbs g-aiPointText" style="top:25.9634%;margin-top:-22.7px;left:23.629%;width:70px;">
			<p class="g-pstyle3">@Name</p>
		</div>
		<div id="g-ai2-5" class="g-_ g-aiAbs g-aiPointText" style="top:26.0884%;margin-top:-22.7px;left:4.3575%;width:80px;">
			<p class="g-pstyle2">
				<a href="/chats" style="text-decoration: none; color: white" class="g-pstyle2">Чаты</a>
			</p>
		</div>
		<div id="g-ai2-6" class="g-_ g-aiAbs g-aiPointText" style="top:33.7134%;margin-top:-22.7px;left:4.3575%;width:234px;">
			<p class="g-pstyle2">
			<a style="text-decoration: none; color: white" href="@SearcherLink" class="g-pstyle2">Найти репетитора</a>
			</p>
		</div>
		<div id="g-ai2-7" class="g-_ g-aiAbs g-aiPointText" style="top:33.9634%;margin-top:-22.7px;left:23.629%;width:120px;">
			<p class="g-pstyle3">@Description</p>
		</div>
	</div>
	</div>
}

@if (_authData?.UserType == "Tutor")
{
	<div id="g-_-_-box" class="ai2html">
		<!-- Artboard: Artboard_4 -->
		<div id="g-_-_-Artboard_4" class="g-artboard" style="max-width: 1600px;max-height: 800px" data-aspect-ratio="2" data-min-width="0">
			<div style="padding: 0 0 50% 0;"></div>
			<img id="g-_-_-Artboard_4-img" class="g-_-_-Artboard_4-img g-aiImg" alt="" src="https://i.ibb.co/K7SG6cJ/Artboard-4.png"/>
			<div id="g-ai3-1" class="g-_ g-aiAbs g-aiPointText" style="top:7.5963%;margin-top:-42.8px;left:1.4966%;width:272px;">
				<p class="g-pstyle0"><a href="/" style="text-decoration: none; color: white">TUTORSERVICE</a></p>
			</div>
			<div id="g-ai3-2" class="g-_ g-aiAbs g-aiPointText" style="top:17.3322%;margin-top:-44.7px;left:22.183%;width:613px;">
				<p class="g-pstyle1">Личный кабинет</p>
			</div>
			<div id="g-ai3-3" class="g-_ g-aiAbs g-aiPointText" style="top:18.9634%;margin-top:-22.7px;left:4.3575%;width:215px;">
				<p class="g-pstyle2">Личный кабинет</p>
			</div>
			<div id="g-ai3-4" class="g-_ g-aiAbs g-aiPointText" style="top:25.9634%;margin-left:-10px;margin-top:-22.7px;left:23.629%;width:70px;">
				<p class="g-pstyle3">@Name</p>
			</div>
			<div id="g-ai3-5" class="g-_ g-aiAbs g-aiPointText" style="top:26.0884%;margin-top:-22.7px;left:4.3575%;width:80px;">
				<a style="text-decoration: none; color: white" href="/chats" class="g-pstyle2">Чаты</a>
			</div>
			@if (WorkFormat == Common.Models.WorkFormat.Online)
			{
				<div id="g-ai3-8" class="g-aiAbs form_radio_btn" style="top:33.0496%;margin-top:-16.4px;left:23.2085%;width:98px;">
					<input id="radio-1" type="radio" name="workFormat" value="Online" checked
					       @onchange="@(() => UpdateWorkFormat(Common.Models.WorkFormat.Online))">
					<label for="radio-1" style="top:33.0496%;margin-top:-2px;margin-left:-18px;left:23.2085%;width:114px;">Онлайн</label>
				</div>
			}
			else
			{
				<div id="g-ai3-8" class="g-aiAbs form_radio_btn" style="top:33.0496%;margin-top:-16.4px;left:23.2085%;width:98px;">
					<input id="radio-1" type="radio" name="workFormat" value="Online"
					       @onchange="@(() => UpdateWorkFormat(Common.Models.WorkFormat.Online))">
					<label for="radio-1" style="top:33.0496%;margin-top:-2px;margin-left:-18px;left:23.2085%;width:114px;">Онлайн</label>
				</div>
			}
			@if (WorkFormat == Common.Models.WorkFormat.ClientHome)
            {
            	<div id="g-ai3-10" class="g-aiAbs form_radio_btn" style="top:33.0496%;margin-top:-16.4px;left:32.9429%;width:121px;">
		            <input id="radio-2" type="radio" name="workFormat" value="ClientHome" checked
		                   @onchange="@(() => UpdateWorkFormat(Common.Models.WorkFormat.ClientHome))">
                	<label for="radio-2" style="top:33.0496%;margin-top:-2px;margin-left:-20px;left:32.9429%;width:137px;">У ученика</label>
                </div>
            }
            else
            {
            	<div id="g-ai3-10" class="g-aiAbs form_radio_btn" style="top:33.0496%;margin-top:-16.4px;left:32.9429%;width:121px;">
		            <input id="radio-2" type="radio" name="workFormat" value="ClientHome"
		                   @onchange="@(() => UpdateWorkFormat(Common.Models.WorkFormat.ClientHome))">
                	<label for="radio-2" style="top:33.0496%;margin-top:-2px;margin-left:-20px;left:32.9429%;width:137px;">У ученика</label>
                </div>
            }
			@if (WorkFormat == Common.Models.WorkFormat.TutorHome)
            {
	            <div id="g-ai3-7" class="g-aiAbs form_radio_btn" style="top:33.0496%;margin-top:-16.4px;left:44.1867%;width:85px;">
		            <input id="radio-3" type="radio" name="workFormat" value="TutorHome" checked
		                   @onchange="@(() => UpdateWorkFormat(Common.Models.WorkFormat.TutorHome))">
		            <label for="radio-3" style="top:33.0496%;margin-top:-2px;margin-left:-20px;left:44.1867%;width:102px;">У себя</label>
	            </div>
            }
            else
            {
	            <div id="g-ai3-7" class="g-aiAbs form_radio_btn" style="top:33.0496%;margin-top:-16.4px;left:44.1867%;width:85px;">
		            <input id="radio-3" type="radio" name="workFormat" value="TutorHome"
		                   @onchange="@(() => UpdateWorkFormat(Common.Models.WorkFormat.TutorHome))">
		            <label for="radio-3" style="top:33.0496%;margin-top:-2px;margin-left:-20px;left:44.1867%;width:102px;">У себя</label>
	            </div>
            }
			@if (WorkFormat == Common.Models.WorkFormat.Mixed)
            {
	            <div class="g-aiAbs form_radio_btn" style="top:33.1746%;margin-top:-16.4px;left:53.2808%;width:144px;">
		            <input id="radio-4" type="radio" name="workFormat" value="Mixed" checked
		                   @onchange="@(() => UpdateWorkFormat(Common.Models.WorkFormat.Mixed))">
		            <label for="radio-4" style="top:33.1746%;margin-top:-2px;margin-left:-20px; left:52.2808%;width:160px;">Смешанный</label>
	            </div>
            }
            else
            {
	            <div class="g-aiAbs form_radio_btn" style="top:33.1746%;margin-top:-16.4px;left:53.2808%;width:144px;">
		            <input id="radio-4" type="radio" name="workFormat" 
		                   @onchange="@(() => UpdateWorkFormat(Common.Models.WorkFormat.Mixed))">
		            <label for="radio-4" style="top:33.1746%;margin-top:-2px;margin-left:-20px; left:52.2808%;width:160px;">Смешанный</label>
	            </div>
            }
			<div id="g-ai3-13" class="g-aiAbs" style="top:41.3384%;margin-top:-22.7px;margin-left:-10px;left:23.629%;width:540px;">
				<p class="g-pstyle3">
					Цена в час:<input size="1" @bind="NewPrice" placeholder="@NewPrice">
					Мин:<input size="1" @bind="NewMaxClass" placeholder="@NewMaxClass">
					Макс:<input size="1" @bind="NewMinClass" placeholder="@NewMinClass">
				</p>
			</div>
			<div id="g-ai3-14" class="g-_ g-aiAbs g-aiPointText" style="top:50.2134%;margin-top:-22.7px;margin-left:-10px;left:23.629%;width:120px;">
				<p class="g-pstyle3"><textarea cols="53" rows="5" @bind="NewDescription" placeholder="@NewDescription"></textarea></p>
			</div>
			<div id="g-ai3-15" class="g-aiAbs" style="top:82.2134%;margin-top:-22.7px;margin-left:-10px;left:23.629%;width:120px;">
				<button @onclick="@OnChangeDescriptionButtonClick" class="btn">Изменить описание</button>
			</div>
		</div>
	</div>
}
<button class="btn" onclick="@LogOut">Выйти</button>
@code {
	private string SearcherLink => $"http://localhost:7000/search/{_authData?.Token}";
    private string? Name { get; set; }
    private int? Price { get; set; }
	private int? MinClass { get; set; }
	private int? MaxClass { get; set; }
    private WorkFormat? WorkFormat { get; set; }
    private string? Description { get; set; }
	
	private int? NewPrice { get; set; }
	private int? NewMinClass { get; set; }
	private int? NewMaxClass { get; set; }
	private string? NewDescription { get; set; }
	private WorkFormat? NewWorkFormat { get; set; }

    private AuthorizationData _authData;

    private async Task GetTutor()
    {
        var response = await _HttpService.GetAsync<Tutor>($"/api/tutors?token={_authData.Token}");

        var user = response.ResponseDto;
        Name = user?.Name;
        Description = user?.Description ?? "пусто";
        Price = user?.PricePerHour ?? 0;
	    MinClass = user?.PupilMinClass ?? 1;
	    MinClass = user?.PupilMaxClass ?? 11;
	    WorkFormat = user?.WorkFormat ?? Common.Models.WorkFormat.Online;

	    NewDescription = Description;
	    NewPrice = Price;
	    NewMinClass = MinClass;
	    NewMaxClass = MaxClass;
	    NewWorkFormat = WorkFormat;
    }
    
    private async Task GetClient()
    {
        var result = await _HttpService.GetAsync<Client>($"/api/clients?token={_authData.Token}");
        Name = result.ResponseDto.Name;
    }

    private async Task LogOut()
    {
        await _authorizationService.CancelAuthorization();
        NavigationManager.NavigateTo("Login");
    }

	async Task OnChangeDescriptionButtonClick()
	{
		var changeDto = new ChangeDescriptionDto
		{
			WorkFormat = NewWorkFormat,
			Description = NewDescription,
			PricePerHour = NewPrice,
			PupilMinClass = NewMinClass,
			PupilMaxClass = NewMaxClass,
		};

		await _HttpService.PatchWithBodyAsync<Task>("api/tutors", changeDto);
	}

	private async Task UpdateWorkFormat(WorkFormat i)
	{
		NewWorkFormat = i;
	}

    protected override async Task OnInitializedAsync()
    {
        var authData = await _authorizationService.GetAuthData();
        if (authData is null)
            NavigationManager.NavigateTo("Login");

        _authData = authData!;
        
        if (authData!.UserType == "Client")
            await GetClient();
        else
            await GetTutor();
    }
}
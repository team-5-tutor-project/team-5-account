@page "/Login"
@using TutorProject.Account.Front.Dtos
@using TutorProject.Account.Front.Models
@using TutorProject.Account.Front.Services
@inject NavigationManager NavigationManager
@inject HttpService _httpService
@inject AuthorizationService _authorizationService

<title>TutorService</title>
<h1>Добро пожаловать в TutorService</h1>
<h2>Войти как 
<button class="btn btn-primary" @onclick="ChangeUserType">
    @switch (UserType)
    {
        case UserType.Client:
            <a>Клиент</a>
            break;
        case UserType.Tutor:
            <a>Репетитор</a>
            break;
    }
</button>
</h2>
<p></p>
<p><input @bind="Username" placeholder="login"></p>
<p><input @bind="Password" type="password" placeholder="password"></p>
@if (LoginFailed)
{
    <p>Ошибка! Не найден пользователь с введёнными данными.</p>
}
<button class="btn btn-dark" @onclick="@OnLoginButtonClick">Войти</button>
<p></p>
<p>Ещё нет аккаунта? <a href="Registration">Регистрация</a></p>

@code {
    private UserType UserType { get; set; }
    
    private string Username { get; set; }
    private string Password { get; set; }
    
    private bool LoginFailed { get; set; }
    
    void ChangeUserType()
    {
        UserType = UserType switch {
            UserType.Client => UserType.Tutor,
            UserType.Tutor => UserType.Client,
            _ => throw new InvalidOperationException()
        };
    }

    async Task OnLoginButtonClick()
    {
        var loginRequest = new AuthorizationRequestDto
        {
            Login = Username,
            Password = Password
        };

        var result = await _httpService.PostWithBodyAsync<LoginResponseDto>("api/authorization", loginRequest);
        if (result.IsSuccessful)
        {
            await _authorizationService.AuthorizeAsync(result.ResponseDto!.AuthorizationToken);
            NavigationManager.NavigateTo($"chats");
        }

        LoginFailed = true;
    }

    protected override async Task OnInitializedAsync()
    {
        if (await _authorizationService.IsAuthorizedAsync())
            NavigationManager.NavigateTo("Account");
    }

}